// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package user_v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUserNotFound(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsUnknownError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsUserNameExist(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NAME_EXIST.String() && e.Code == 500
}

func ErrorUserNameExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_NAME_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsClubNameExist(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CLUB_NAME_EXIST.String() && e.Code == 500
}

func ErrorClubNameExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CLUB_NAME_EXIST.String(), fmt.Sprintf(format, args...))
}
