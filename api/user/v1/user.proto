syntax = "proto3";

package api.user.v1;

import "google/api/annotations.proto";
// protoc-gen-validate的validate生成文件后，包含// no validation rules for ...。目前仍未解决。所以不建议用validate
// xxx:https://github.com/envoyproxy/protoc-gen-validate/issues/240
import "validate/validate.proto";

// 建议包名简称为"service_版本号"，不支持点号连接
option go_package = "double/api/user/v1;user_v1";

service User {
  // 增
  rpc CreateUser (CreateUserRequest) returns (CreateUserReply){
    option (google.api.http) = {
      post : "v1/user"
      body : "*"
    };
  };
  // 禁用
  rpc BanUser (BanUserRequest) returns (BanUserReply) {
    option (google.api.http) = {
      put : "v1/user_ban/{id}"
      body : "*"
    };
  };
  // 改名
  rpc UpdateUserName (UpdateUserNameRequest) returns (UpdateUserNameReply) {
    option (google.api.http) = {
      put : "v1/user_update_name/{id}"
      body : "*"
    };
  };
  // 改密
  rpc UpdateUserPassword (UpdateUserPasswordRequest) returns (UpdateUserPasswordReply) {
    option (google.api.http) = {
      put : "v1/user_update_password/{id}"
      body : "*"
    };
  };
  // 查
  rpc GetUser (GetUserRequest) returns (GetUserReply) {
    option (google.api.http) = {
      get : "v1/user/{id}"
    };
  };
  // 列
  rpc ListUser (ListUserRequest) returns (ListUserReply) {
    option (google.api.http) = {
      get : "v1/user"
    };
  };
  // 登录
  rpc UserLogin (UserLoginRequest) returns (UserLoginReply) {
    option (google.api.http) = {
      post : "v1/login"
      body : "*"
    };
  };
  // 登出（略）
  rpc UserLogout (UserLogoutRequest) returns (UserLogoutReply) {
    option (google.api.http) = {
      post : "v1/logout"
      body : "*"
    };
  };
}

message UserDetail {
  int64 id = 1;
  string userName = 2;
  string clubName = 3;
  string createdAt = 4;
}

// 创建角色（角色名、俱乐部名称唯一）
// 限制规则：https://github.com/envoyproxy/protoc-gen-validate#constraint-rules
message CreateUserRequest {
  string userName = 1 [(validate.rules).string = {min_len: 1, max_len: 50}]; // 注解validate：string character 1 to 50
  string password = 2 [(validate.rules).string = {min_len: 6, max_len: 50}];
  string clubName = 3 [(validate.rules).string = {min_len: 1, max_len: 50}];
}
message CreateUserReply {
  UserDetail userDetail = 1;
}

// 页面异步请求，略
//// 确认密码符合格式要求
//message VerifyPasswordRequest {
//  string userName = 1;
//  string password = 2;
//}
//
//message VerifyPasswordReply {
//  bool ok = 1;
//}
//
//// 确认角色名是否可用
//message VerifyUserNameRequest {
//  string username = 1;
//}
//
//message VerifyUserNameReply {
//  bool ok = 1;
//}
//
//// 确认俱乐部名是否可用
//message VerifyClubNameRequest {
//  string password = 2;
//}
//
//message VerifyClubNameReply {
//  bool ok = 1;
//}

// 禁用角色，不会物理删除
message BanUserRequest {
  int64 id = 1 [(validate.rules).int64.gt = 0];
}
message BanUserReply {
  bool res = 1;
}

// 改名
message UpdateUserNameRequest {
  int64 id = 1 [(validate.rules).int64.gt = 0];
  string newUserName = 2;
}
message UpdateUserNameReply {
  bool res = 1;
}

// 换密码
message UpdateUserPasswordRequest {
  int64 id = 1 [(validate.rules).int64.gt = 0];
  string oldUserPassword = 2 [(validate.rules).string = {min_len: 6, max_len: 50}];
  string newUserPassword = 3 [(validate.rules).string = {min_len: 6, max_len: 50}];
}
message UpdateUserPasswordReply {
  bool res = 1;
}

// 查询单一角色信息
message GetUserRequest {
  int64 id = 1 [(validate.rules).int64.gt = 0];
}
message GetUserReply {
  UserDetail userDetail = 1;
}

// 批量查询角色信息
message ListUserRequest {
}
message ListUserReply {
  repeated UserDetail userDetails = 1;
}

// 登录
message UserLoginRequest {
  string userName = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
  string password = 2 [(validate.rules).string = {min_len: 6, max_len: 50}];
}

message UserLoginReply {
  bool res = 1;
  UserDetail userDetail = 2;
}

// 登出
message UserLogoutRequest {
  int64 id = 1 [(validate.rules).int64.gt = 0];
}

message UserLogoutReply {
  bool res = 1;
}
