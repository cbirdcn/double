// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package club_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClubClient is the client API for Club service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubClient interface {
	CreateClub(ctx context.Context, in *CreateClubRequest, opts ...grpc.CallOption) (*CreateClubReply, error)
	UpdateClub(ctx context.Context, in *UpdateClubRequest, opts ...grpc.CallOption) (*UpdateClubReply, error)
	DeleteClub(ctx context.Context, in *DeleteClubRequest, opts ...grpc.CallOption) (*DeleteClubReply, error)
	GetClub(ctx context.Context, in *GetClubRequest, opts ...grpc.CallOption) (*GetClubReply, error)
	ListClub(ctx context.Context, in *ListClubRequest, opts ...grpc.CallOption) (*ListClubReply, error)
}

type clubClient struct {
	cc grpc.ClientConnInterface
}

func NewClubClient(cc grpc.ClientConnInterface) ClubClient {
	return &clubClient{cc}
}

func (c *clubClient) CreateClub(ctx context.Context, in *CreateClubRequest, opts ...grpc.CallOption) (*CreateClubReply, error) {
	out := new(CreateClubReply)
	err := c.cc.Invoke(ctx, "/api.club.v1.Club/CreateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) UpdateClub(ctx context.Context, in *UpdateClubRequest, opts ...grpc.CallOption) (*UpdateClubReply, error) {
	out := new(UpdateClubReply)
	err := c.cc.Invoke(ctx, "/api.club.v1.Club/UpdateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) DeleteClub(ctx context.Context, in *DeleteClubRequest, opts ...grpc.CallOption) (*DeleteClubReply, error) {
	out := new(DeleteClubReply)
	err := c.cc.Invoke(ctx, "/api.club.v1.Club/DeleteClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetClub(ctx context.Context, in *GetClubRequest, opts ...grpc.CallOption) (*GetClubReply, error) {
	out := new(GetClubReply)
	err := c.cc.Invoke(ctx, "/api.club.v1.Club/GetClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) ListClub(ctx context.Context, in *ListClubRequest, opts ...grpc.CallOption) (*ListClubReply, error) {
	out := new(ListClubReply)
	err := c.cc.Invoke(ctx, "/api.club.v1.Club/ListClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServer is the server API for Club service.
// All implementations must embed UnimplementedClubServer
// for forward compatibility
type ClubServer interface {
	CreateClub(context.Context, *CreateClubRequest) (*CreateClubReply, error)
	UpdateClub(context.Context, *UpdateClubRequest) (*UpdateClubReply, error)
	DeleteClub(context.Context, *DeleteClubRequest) (*DeleteClubReply, error)
	GetClub(context.Context, *GetClubRequest) (*GetClubReply, error)
	ListClub(context.Context, *ListClubRequest) (*ListClubReply, error)
	mustEmbedUnimplementedClubServer()
}

// UnimplementedClubServer must be embedded to have forward compatible implementations.
type UnimplementedClubServer struct {
}

func (UnimplementedClubServer) CreateClub(context.Context, *CreateClubRequest) (*CreateClubReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClub not implemented")
}
func (UnimplementedClubServer) UpdateClub(context.Context, *UpdateClubRequest) (*UpdateClubReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClub not implemented")
}
func (UnimplementedClubServer) DeleteClub(context.Context, *DeleteClubRequest) (*DeleteClubReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClub not implemented")
}
func (UnimplementedClubServer) GetClub(context.Context, *GetClubRequest) (*GetClubReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClub not implemented")
}
func (UnimplementedClubServer) ListClub(context.Context, *ListClubRequest) (*ListClubReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClub not implemented")
}
func (UnimplementedClubServer) mustEmbedUnimplementedClubServer() {}

// UnsafeClubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServer will
// result in compilation errors.
type UnsafeClubServer interface {
	mustEmbedUnimplementedClubServer()
}

func RegisterClubServer(s grpc.ServiceRegistrar, srv ClubServer) {
	s.RegisterService(&Club_ServiceDesc, srv)
}

func _Club_CreateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).CreateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.club.v1.Club/CreateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).CreateClub(ctx, req.(*CreateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_UpdateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).UpdateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.club.v1.Club/UpdateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).UpdateClub(ctx, req.(*UpdateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_DeleteClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).DeleteClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.club.v1.Club/DeleteClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).DeleteClub(ctx, req.(*DeleteClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.club.v1.Club/GetClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetClub(ctx, req.(*GetClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_ListClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).ListClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.club.v1.Club/ListClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).ListClub(ctx, req.(*ListClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Club_ServiceDesc is the grpc.ServiceDesc for Club service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Club_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.club.v1.Club",
	HandlerType: (*ClubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClub",
			Handler:    _Club_CreateClub_Handler,
		},
		{
			MethodName: "UpdateClub",
			Handler:    _Club_UpdateClub_Handler,
		},
		{
			MethodName: "DeleteClub",
			Handler:    _Club_DeleteClub_Handler,
		},
		{
			MethodName: "GetClub",
			Handler:    _Club_GetClub_Handler,
		},
		{
			MethodName: "ListClub",
			Handler:    _Club_ListClub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club.proto",
}
